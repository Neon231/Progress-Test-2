def knapsack(N, W, items):
    # Initialize a 2D array to store the maximum profit
    dp = [[0] * (W + 1) for _ in range(N + 1)]

    # Iterate through each item
    for i in range(1, N + 1):
        weight_i, value_i, name_i = items[i - 1]
        for w in range(1, W + 1):
            # If the current item's weight is less than or equal to the current capacity
            if weight_i <= w:
                # Take the maximum of including the current item or excluding it
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight_i] + value_i)
            else:
                # If the current item's weight is more than the current capacity,
                # then we cannot include it, so take the previous value
                dp[i][w] = dp[i - 1][w]

    # Return the maximum profit
    return dp[N][W]

# Read input from file
def read_input(filename):
    with open(filename, 'r') as file:
        N, W = map(int, file.readline().split())
        items = []
        for _ in range(N):
            weight_i, value_i, name_i = file.readline().split()
            items.append((int(weight_i), int(value_i), name_i.strip()))
    return N, W, items

# Write output to file
def write_output(filename, max_profit, chosen_items):
    with open(filename, 'w') as file:
        file.write(f"Maximum value found: {max_profit}\n")
        file.write("Name of object and quantity of each object:\n")
        for item in chosen_items:
            file.write(f"{item[2]} {item[3]}\n")

def main():
    input_filename = "BAG.INP"
    output_filename = "BAG.OUT"

    # Read input
    N, W, items = read_input(input_filename)

    # Solve knapsack problem
    max_profit = knapsack(N, W, items)

    # Backtrack to find the chosen items
    chosen_items = []
    w = W
    for i in range(N, 0, -1):
        weight_i, value_i, name_i = items[i - 1]
        if max_profit != 0 and max_profit != dp[i - 1][w]:
            chosen_items.append((name_i, weight_i, value_i, 1))
            max_profit -= value_i
            w -= weight_i

    # Write output
    write_output(output_filename, dp[N][W], chosen_items)

if __name__ == "__main__":
    main()
